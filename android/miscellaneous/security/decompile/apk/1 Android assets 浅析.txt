Q:
* 如何打包进 apk 包的
* 与 raw 的区别
* 使用

# 1 assets 是如保打包进 apk 的
运行过程的几个任务

    Executing tasks: [:app:assembleDebug]    
    ...
    :app:generateDebugAssets
    :app:mergeDebugAssets
    ...
    :app:packageDebug
    :app:assembleDebug

## 1.1 :app:generateDebugAssets
    搜索 getTaskName("generate", "Assets")
    com.android.build.gradle.internal.profile.RecordingBuildListener#afterExecute
    但是没有 actions
    联想到其位于 com.android.build.gradle.internal.TaskManager#createAnchorTasks
    可能只是锚点任务，没有实际操任

## 1.2 :app:mergeDebugAssets
该任务将 assets 复制到 \app\build\intermediates\assets\debug

我们知道，assets 中的内容是“原样”打包进 apk 的  
是否确定是原样的，简单查看一下打包过程，运行时看到一个任务为

    :app:mergeDebugAssets
    
查看android gradle 插件源码
    
    com.android.build.gradle.internal.TaskManager#createMergeAssetsTask
    com.android.build.gradle.tasks.MergeSourceSetFolders.MergeAppAssetConfigAction
    com.android.build.gradle.tasks.MergeSourceSetFolders.MergeAssetBaseConfigAction#execute

调试

    根据学习的 调试 android.tools.build 源码的方法
    先 clean project，然后执行 
    gradle :app:mergeDebugAssets -Dorg.gradle.debug=true --no-daemon
    断点到
    com.android.build.gradle.tasks.MergeSourceSetFolders#doFullTaskAction
        
        // this is full run, clean the previous output
        //输出文件夹为 \app\build\intermediates\assets\debug
        File destinationDir = getOutputDir();
        FileUtils.cleanOutputDir(destinationDir);
        //返回要合并的文件
        //内容为
        //AssetSet{main, sources=[D:\workspace\AndroidX\demo\ApkStructureDemo\app\src\main\assets, D:\workspace\AndroidX\demo\ApkStructureDemo\app\build\generated\assets\shaders\debug]}
        //AssetSet{debug, sources=[D:\workspace\AndroidX\demo\ApkStructureDemo\app\src\debug\assets]}
        List<AssetSet> assetSets = computeAssetSetList();
        ...
            merger.mergeData(writer, false /*doCleanUp*/);
            
    com.android.ide.common.res2.DataMerger#mergeData
    com.android.ide.common.res2.MergeConsumer#addItem
    com.android.ide.common.res2.MergedAssetWriter#addItem
    
    public void addItem(@NonNull final AssetItem item) throws ConsumerException {
        // Only write it if the state is TOUCHED.
        if (item.isTouched()) {
            getExecutor().submit(new AssetWorkParameters(item, getRootFolder()));
        }
    }
    
    com.android.build.gradle.tasks.MergeSourceSetFolders.AssetWorkAction
    
        public void run() {
            try {
                AssetFile assetFile = Preconditions.checkNotNull(item.getSource());

                Path fromFile = assetFile.getFile().toPath();

                // the out file is computed from the item key since that includes the
                // relative folder.
                Path toFile =
                        new File(rootFolder, item.getKey().replace('/', File.separatorChar))
                                .toPath();

                Files.createDirectories(toFile.getParent());

                if (item.shouldBeUnGzipped()) {
                    // When AAPT processed resources, it would uncompress gzipped files, as they will be
                    // compressed in the APK anyway. They are renamed in AssetItem#create(File, File)
                    try (GZIPInputStream gzipInputStream = new GZIPInputStream(
                            new BufferedInputStream(Files.newInputStream(fromFile)))) {
                        Files.copy(gzipInputStream, toFile, StandardCopyOption.REPLACE_EXISTING);
                    }
                } else {
                    //最终调用 copy 方法
                    Files.copy(fromFile, toFile, StandardCopyOption.REPLACE_EXISTING);
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

## 1.3 :app:packageDebug
    根据 getTaskName("package") 搜索到 com.android.build.gradle.tasks.PackageApplication
    com.android.build.gradle.tasks.PackageAndroidArtifact
    com.android.build.gradle.tasks.PackageAndroidArtifact#doFullTaskAction
    com.android.build.gradle.tasks.PackageAndroidArtifact#splitFullAction
    com.android.build.gradle.tasks.PackageAndroidArtifact#doTask
    com.android.builder.internal.packaging.IncrementalPackager#updateAssets
    com.android.builder.internal.packaging.IncrementalPackager#updateFiles
    com.android.apkzlib.zfile.ApkZFileCreator#writeFile
    
    
# 2 与 raw 的区别
两者都不会被编译，但是

## 2.1 assets 不会分配 id，需要用 AssetsManager 使用
    
            getStringFromInputStream(assets.open("sub/demo.txt"))
            
            getStringFromInputStream(resources.openRawResource(R.raw.raw_demo))
## 2.2 assets 可以有目录结构
## 2.3 assets 有大小限制
具说是旧版本限制 1M 实测没有限制。