Q:
* 去哪里查看所有版本
* 重要的需要适配的内容

# 0x01 去哪里查看 Android 的所有版本
## 1.1 Android - History
在 android.com 之前有 [Android - History](https://www.android.com/history)  
整理了各版本，还有相关的图片，甚至还有中文版 [Android - 历史](https://www.android.com/intl/zh-CN_cn/history/)  
但是在 M 之后就停止了……

## 1.2 Android Releases
在 developer.android.google.cn 有[Android Releases](https://developer.android.google.cn/preview/)  
但是只是从 Jelly Bean 开始有。

## 1.3 SDK Manager
最早只到 7 ，Android 2.2

## 1.4 android.os.Build.VERSION_CODES
注释中包含了介绍

## 1.5 Wikipedia
[Android历史版本](https://zh.wikipedia.org/wiki/Android%E6%AD%B7%E5%8F%B2%E7%89%88%E6%9C%AC)  
这里整理的最全最完整。

# 0x02 api 对应的版本号
来自 wikipedia

代号|版本|发布日期|API Level|安全性更新
-|
No codename|1.0|2008年9月23日|1|不支持
Petit Four|1.1|2009年2月9日|2|不支持
Cupcake-纸杯蛋糕|1.5|2009年4月27日|3|不支持
Donut-甜甜圈|1.6|2009年9月15日|4|不支持
Eclair-闪电泡芙|2.0 – 2.1|2009年10月26日|5 – 7|不支持
Froyo-优格霜淇淋|2.2 – 2.2.3|2010年5月20日|8|不支持
Gingerbread-姜饼|2.3 – 2.3.7|2010年12月6日|9 – 10|不支持
Honeycomb-蜂巢|3.0 – 3.2.6|2011年2月22日|11 – 13|不支持
Ice Cream Sandwich-冰淇淋三明治|4.0 – 4.0.4|2011年10月18日|14 – 15|不支持
Jelly Bean-果冻豆|4.1 – 4.3.1|2012年7月9日|16 – 18|不支持
KitKat-奇巧巧克力|4.4 – 4.4.4|2013年10月31日|19 – 20|不支持
Lollipop-棒棒糖|5.0 – 5.1.1|2014年11月12日|21 – 22|不支持
Marshmallow-棉花糖|6.0 – 6.0.1|2015年10月5日|23|支持
Nougat-牛轧糖|7.0 – 7.1.2|2016年8月22日|24 – 25|支持
Oreo-奥利奥|8.0 – 8.1|2017年8月21日|26 – 27|支持
P| ?|预览版|28|尚未发布


## mr 是什么意思
[What does MR version stand for?](https://stackoverflow.com/questions/8548423)  
> mr = "maintenance release", fr = "factory rom". 

# 0x03 查看需要适配的内容
在 [Android Releases](https://developer.android.google.cn/preview/) 中，介绍各版本时  
在“迁多指南”包含了两个表
* 对运行在 Android P 设备上的所有应用都有影响的关键变化。
* targetSdkVersion 设置为“P”时影响应用的关键变化。

如果没有这两个表，可以查看“行为变更”部分  
以下列出部分 **笔者项目中** 可能要注意的内容。
## 16-4.1-JELLY_BEAN

## 17-4.2-JELLY_BEAN_MR1
* Content providers are no longer exported by default
* user location results may be less accurate if your app requests the ACCESS_COARSE_LOCATION permission but does not request the ACCESS_FINE_LOCATION permission.
* Some device settings defined by Settings.System are now read-only.
* If your app uses WebView, Android 4.2 adds an additional layer of security so you can more safely bind JavaScript to your Android code. If you set your targetSdkVersion to 17 or higher, you must now add the **@JavascriptInterface** annotation to any method that you want available to your JavaScript (the method must also be public). If you do not provide the annotation, the method is not accessible by a web page in your WebView when running on Android 4.2 or higher. If you set the targetSdkVersion to 16 or lower, the annotation is not required, but we recommend that you update your target version and add the annotation for additional security.

## 18-4.3-JELLY_BEAN_MR2
### If your app uses implicit intents...
Your app might misbehave in a restricted profile environment.
### If your app depends on accounts...
Your app might misbehave in a restricted profile environment.
### If your app uses VideoView...
Your video might appear smaller on Android 4.3.

## 19-4.4-KITKAT
### 如果您的应用从外部存储空间读取...
您的应用在 Android 4.4 上运行时无法读取外部存储空间上的共享文件，除非您的应用具有 READ_EXTERNAL_STORAGE 权限。也就是说，没有此权限，您无法再访问 getExternalStoragePublicDirectory() 返回的目录中的文件。但是，如果您仅需要访问 getExternalFilesDir() 提供的您的应用特有目录，那么，您不需要 READ_EXTERNAL_STORAGE 权限。
### 如果您的应用使用 WebView...
在 Android 4.4 上运行时，您的应用的行为会有所不同，将应用的 targetSdkVersion 更新为“19”或更高版本时尤其如此。
### 如果您的应用使用 AlarmManager...
将您的应用的 targetSdkVersion 设置为“19”或更高版本时，您使用 set() 或 setRepeating() 创建的闹铃将变得不准确。
### 如果您的应用使用 ContentResolver 同步数据...
将应用的 targetSdkVersion 设置为“19”或更高版本时，使用 addPeriodicSync() 创建同步将在默认的 Flex 间隔内（在您指定期间的 4% 左右）执行您的同步操作。

## 20-4.4W

## 21-5.0-LOLLIPOP
### Android Runtime (ART)
在 Android 5.0 中，ART 运行时取代 Dalvik 成为平台默认设置。Android 4.4 中已引入处于实验阶段的 ART 运行时。
### Material Design
### getRecentTasks()
Android 5.0 中引入新的“并发文档和 Activity 任务”功能后（请参阅下文最近使用的应用屏幕中的并发文档和 Activity），为提升用户隐私的安全性，现已弃用 ActivityManager.getRecentTasks() 方法。对于向后兼容性，此方法仍会返回它的一小部分数据，包括调用应用自己的任务和可能的一些其他非敏感任务（如首页）。如果您的应用使用此方法检索它自己的任务，则改用 getAppTasks() 检索该信息。
### 绑定到服务
Context.bindService() 方法现在需要显式 Intent，如果提供隐式 intent，将引发异常。为确保应用的安全性，请使用显式 intent 启动或绑定 Service，且不要为服务声明 intent 过滤器。
### WebView
如果您的应用是面向 API 级别 21 或更高级别：  
* 默认情况下，系统会阻止混合内容和第三方 Cookie。要允许混合内容和第三方 Cookie，请分别使用 setMixedContentMode() 和 setAcceptThirdPartyCookies() 方法。
* 系统现在可以智能地选择要绘制的 HTML 文档部分。这个新的默认行为有助于减少内存占用和提升性能。如果您要一次渲染整个文档，可通过调用 enableSlowWholeDocumentDraw() 停用此优化。

如果您的应用是面向低于 21 的 API 级别：系统允许混合内容和第三方 Cookie，并始终一次渲染整个文档。

等。

## 22-5.1-LOLLIPOP_MR1
### 已弃用的 HTTP 类
Android 5.1 中已弃用 org.apache.http 类和 android.net.http.AndroidHttpClient 类。这些类将不再保留，您应尽快将使用这些 API 的任何应用代码迁移至 URLConnection 类。

## 23-6.0-M
### 运行时权限
对于以 Android 6.0（API 级别 23）或更高版本为目标平台的应用，请务必在运行时检查和请求权限。要确定您的应用是否已被授予权限，请调用新增的 checkSelfPermission() 方法。要请求权限，请调用新增的 requestPermissions() 方法。即使您的应用并不以 Android 6.0（API 级别 23）为目标平台，您也应该在新权限模式下测试您的应用。

### 取消支持 Apache HTTP 客户端


## 24-7.0-N
### 权限更改
传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider。
### 在应用间共享文件
对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。

要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件。

## 25-7.1-N_MR1

## 26-8.0-O
### 后台执行限制
### 从清单文件中移除广播接收器
Android 8.0 还对特定函数做出了以下变更：  
如果针对 Android 8.0 的应用尝试在不允许其创建后台服务的情况下使用 startService() 函数，则该函数将引发一个 IllegalStateException。  
新的 Context.startForegroundService() 函数将启动一个前台服务。现在，即使应用在后台运行，系统也允许其调用 Context.startForegroundService()。不过，应用必须在创建服务后的五秒内调用该服务的 startForeground() 函数。

### 集合的处理
现在，AbstractCollection.removeAll(null) 和 AbstractCollection.retainAll(null) 始终引发 NullPointerException；之前，当集合为空时不会引发 NullPointerException。此项变更使行为符合文档要求。

在 Android 8.0 中，Collections.sort() 是在 List.sort() 的基础上实现的。在 Android 7.x（API 级别 24 和 25）中，则恰恰相反。在过去，List.sort() 的默认实现会调用 Collections.sort()。



## 27-8.1-O_MR1


## P
### 对于非 SDK 接口的限制
