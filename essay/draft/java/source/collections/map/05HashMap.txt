* 相关性能

看懂以下文章
https://www.cnblogs.com/killbug/p/7679043.html
http://blog.csdn.net/qq_27093465/article/details/52207152
http://blog.csdn.net/brycegao321/article/details/52527236
http://blog.csdn.net/ns_code/article/details/36034955
    
    
# 为什么容量要是 2 的幂
因为取 index 的算法，必须是 2 的幂才能使随机的 hash 均匀分布到表中。  
如果不是 2 的幂，会使有的 index 永远取不到，而有的位置多次取到。  
tab 是有容量的，如何将随机的 hash 对应到在 tab 中的 index 呢， HashMap 使用的是

    i = (n - 1) & hash
按位与，假设 hash 是均匀分布的，那么按位与时，在每一位都要么是 1 要么是 0，就可以均匀地对应于 tab 中。  
必须要是 2 的幂，这样才能保证减 1 后，每一位都是1，如果有一位是 0，按么按位与时那一位结果就总是0了，不能均匀分布。  
如下，容量为 16

    n:      00010000
    n-1:    00001111
    hash:   11111111    index:  1111
    hash:   00000000    index:  0000
    
# 取 index 的方法

    i = (n - 1) & hash
之前在网上看到，为什么不用取模？
>当length为2的n次方时，h&(length - 1)就相当于对length取模，而且速度比直接取模快得多，这是HashMap在速度上的一个优化。

>To create a hashing function for a hash table, often a function is used that has a large domain. To create an index from the output of the function, a modulo can be taken to reduce the size of the domain to match the size of the array; however, it is often faster on many processors to restrict the size of the hash table to powers of two sizes and use a bitmask instead.

# hash 方法
判空，取 hashCode 然后异或上无符号右移 16 位  
为了将 hash 散列到低位，如 Float 的 hashCode

    static final int hash(Object key) {
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
    }

## 构建一个 hash 冲突的 Map
在默认 16 的空量的况下  
求 index=(length-1) & hash  
length-1=0B1111  
则 1<<4 的 index 为 0，只要是左移大于 4 ，则 index 都是 0

# java.util.HashMap#tableSizeFor
```
首先返加时要返回 2 的幂
n<0?1:n>max?max:n+1
所以最前面先减 1
n=cap - 1
然后 | 上无符号右移
n |=n>>>1
完整如下
    static final int tableSizeFor(int cap) {
        int n = cap - 1;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    }
```

# 如何扩容
求出一个新容量，扩大 table  
对其中的原中重新设置索引，要么保持不变，要么加上之前的容量  
详见方法中的注释

# getNode 的过程
不只是 getNode 方法，如 removeNode 等也这样

## index
对 key 求 hash，然后与上 length -1  
hash=hash(key)
(length-1)& hash


## 取出第一个判断
    first=table[index]  
    first.hash == hash && 
                    ((k = first.key) == key || (key != null && key.equals(k)))
                    
需要 hash 相等，且 key 相等

## 判断是不是树结点
                if (first instanceof TreeNode)
                    //如果是树结点
                    return ((TreeNode<K, V>) first).getTreeNode(hash, key);
                    
## 普通链表结点
遍历


# 红黑树
http://blog.csdn.net/eson_15/article/details/51144079