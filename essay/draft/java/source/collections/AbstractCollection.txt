* AbstractCollection 重写了哪些方法
* finishToArray 的作用
# AbstractCollection 重写了哪些方法
iterator 和 size 又提了一遍  
根据这两个方法,重写了  
isEmpty contains add remove clear 方法
以及 toArray containsAll addAll removeAll retainAll
以及 toString



## isEmpty
```
    public boolean isEmpty() {
        return size() == 0;
    }
```
## contains
可以看到，需要对 null 进行判断
```
    public boolean contains(Object o) {
        Iterator<E> it = iterator();
        if (o==null) {
            while (it.hasNext())
                if (it.next()==null)
                    return true;
        } else {
            while (it.hasNext())
                if (o.equals(it.next()))
                    return true;
        }
        return false;
    }
```

## toArray
```
    public Object[] toArray() {
        // Estimate size of array; be prepared to see more or fewer elements
        Object[] r = new Object[size()];
        Iterator<E> it = iterator();
        for (int i = 0; i < r.length; i++) {
            if (! it.hasNext()) // fewer elements than expected
                return Arrays.copyOf(r, i);
            r[i] = it.next();
        }
        return it.hasNext() ? finishToArray(r, it) : r;
    }
```

## remove
注意只移除一个，与 Collection 接口的描述一致。
```
    public boolean remove(Object o) {
        Iterator<E> it = iterator();
        if (o==null) {
            while (it.hasNext()) {
                if (it.next()==null) {
                    it.remove();
                    return true;
                }
            }
        } else {
            while (it.hasNext()) {
                if (o.equals(it.next())) {
                    it.remove();
                    return true;
                }
            }
        }
        return false;
    }
```

## containsAll
```
    public boolean containsAll(Collection<?> c) {
        for (Object e : c)
            if (!contains(e))
                return false;
        return true;
    }
```

## addAll
注意泛型参数是 extends E
以及 modified 与 Collection 的接口定义一致。
```
    public boolean addAll(Collection<? extends E> c) {
        boolean modified = false;
        for (E e : c)
            if (add(e))
                modified = true;
        return modified;
    }
```

## removeAll
```
    public boolean removeAll(Collection<?> c) {
        Objects.requireNonNull(c);
        boolean modified = false;
        Iterator<?> it = iterator();
        while (it.hasNext()) {
            if (c.contains(it.next())) {
                it.remove();
                modified = true;
            }
        }
        return modified;
    }
```

## retainAll
```
    public boolean retainAll(Collection<?> c) {
        Objects.requireNonNull(c);
        boolean modified = false;
        Iterator<E> it = iterator();
        while (it.hasNext()) {
            if (!c.contains(it.next())) {
                it.remove();
                modified = true;
            }
        }
        return modified;
    }
```

## clear
```
    public void clear() {
        Iterator<E> it = iterator();
        while (it.hasNext()) {
            it.next();
            it.remove();
        }
    }
```
## toString
* 空处理
* 循环中的自身判断
* 循环通过 return 退出
* 逗号与空格分开拼接
```
    public String toString() {
        Iterator<E> it = iterator();
        if (! it.hasNext())
            return "[]";

        StringBuilder sb = new StringBuilder();
        sb.append('[');
        for (;;) {
            E e = it.next();
            sb.append(e == this ? "(this Collection)" : e);
            if (! it.hasNext())
                return sb.append(']').toString();
            sb.append(',').append(' ');
        }
    }
```

# finishToArray 的作用
首先文档解释
> Reallocates the array being used within toArray when the iterator returned more elements than expected, and finishes filling it from the iterator.
```
    private static <T> T[] finishToArray(T[] r, Iterator<?> it) {
        int i = r.length;
        while (it.hasNext()) {
            int cap = r.length;
            if (i == cap) {
                int newCap = cap + (cap >> 1) + 1;
                // overflow-conscious code
                if (newCap - MAX_ARRAY_SIZE > 0)
                    newCap = hugeCapacity(cap + 1);
                r = Arrays.copyOf(r, newCap);
            }
            r[i++] = (T)it.next();
        }
        // trim if overallocated
        return (i == r.length) ? r : Arrays.copyOf(r, i);
    }
```
然后在网上查询过程中也看到了这样的写法，但了一下 jdk ，发现在 1.6 中是这样写的.
```
int newCap = ((cap / 2) + 1) * 3;  
```
然后 1.7 之后改为了
```
int newCap = cap + (cap >> 1) + 1;
```

为什么 toArray 要这样写呢？很简单的多线程。
值得注意的是，在测试时上述代码在 next() 时也可以出现异常，看子类的实现。