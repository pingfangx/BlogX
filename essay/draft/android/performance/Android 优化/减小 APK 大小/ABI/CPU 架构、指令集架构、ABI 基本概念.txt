[CPU 和架构](https://developer.android.com/ndk/guides/arch?hl=zh-cn)

[CPU-中央处理器](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8)  
Central Processing Unit

在 [中央处理器操作原理](https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8#%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8%E6%93%8D%E4%BD%9C%E5%8E%9F%E7%90%86) 部分

> CPU的主要运作原理，不论其外观，都是执行储存于被称为程序里的一系列指令。在此讨论的是遵循普遍的冯·诺伊曼结构（von Neumann architecture）设计的装置。程序以一系列数字储存在计算机存储器中。差不多所有的冯·诺伊曼CPU的运作原理可分为四个阶段：提取、解码、执行和写回。

> 第一阶段，提取，从程序内存中检索指令（为数值或一系列数值）。由程序计数器指定程序存储器的位置，程序计数器保存供识别目前程序位置的数值。换言之，程序计数器记录了CPU在目前程序里的踪迹。提取指令之后，PC根据指令式长度增加存储器单元[iwordlength]。指令的提取常常必须从相对较慢的存储器查找，导致CPU等候指令的送入。这个问题主要被论及在现代处理器的缓存和管线化架构（见下）。

> CPU根据从存储器提取到的指令来决定其执行行为。在解码阶段，指令被拆解为有意义的片断。根据CPU的指令集架构（ISA）定义将数值解译为指令[isa]。一部分的指令数值为运算码，其指示要进行哪些运算。其它的数值通常供给指令必要的信息，诸如一个加法运算的运算目标。这样的运算目标也许提供一个常数值（即立即值），或是一个空间的定址值：寄存器或存储器地址，以定址模式决定。在旧的设计中，CPU里的指令解码部分是无法改变的硬体装置。不过在众多抽象且复杂的CPU和ISA中，一个微程序时常用来帮助转换指令为各种形态的讯号。这些微程序在已成品的CPU中往往可以重写，方便变更解码指令。

我们看到，在解码阶段，**指令根据CPU的指令集架构（ISA）定义将数值解译为指令**

> 因为CPU指令集的结构是基于它的接口和使用方法，所以它经常用来区别CPU的＂种类＂。例如一个PowerPC CPU会用到许多不的Power ISA变量。有一些CPU，如英特尔Itanium，可以解译多个ISA指令；不过这项工作大多由软件来完成。多于直接将它在硬件中实现。


[ISA-指令集架构](https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%A7%8B)  
Instruction Set Architecture

[microarchitecture-微架构](https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9E%B6%E6%A7%8B)
> 微架构（英语：microarchitecture），也被叫做计算机组织，微架构使得指令集架构（ISA）可以在处理器上被运行。指令集架构可以在不同的微架构上运行。 计算机结构是一门探讨微架构与指令集两者交互的一门学问。


[处理器架构、指令集和汇编语言，三者有何关系？ - 魔术师LYX的回答 - 知乎](https://www.zhihu.com/question/23474438/answer/39173229)
> 处理器架构即微结构，指令集架构决定微结构的一部分（解码逻辑和执行单元）  
> 指令集决定微结构的一部分硬件逻辑设计

[ABI-应用二进制接口](https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3)
> 在软件开发中，应用二进制接口（英语：application binary interface，缩写为 ABI）是指两程序模块间的接口；通常其中一个程序模块会是库或操作系统所提供的服务，而另一边的模块则是用户所运行的程序。

根据 [ABI 管理](https://developer.android.com/ndk/guides/abis?hl=zh-cn) 所述
> 不同 Android 手机使用不同的 CPU，因此支持不同的指令集。CPU 与指令集的每种组合都有其自己的应用二进制接口（或 ABI）。 ABI 可以非常精确地定义应用的机器代码在运行时如何与系统交互。 您必须为应用要使用的每个 CPU 架构指定 ABI。

自己理解，每个 so 是二进制的，它在不同 CPU 使用不同指令集（即上面说的每种组合），要对应不同的 ABI

但每个 ABI 支持一个或多个指令集。

在 [Android 平台 ABI 支持](https://developer.android.com/ndk/guides/abis?hl=zh-cn#aen)

Android 系统在运行时知道它支持哪些 ABI，因为版本特定的系统属性会指示：

设备的主要 ABI，与系统映像本身使用的机器代码对应。
可选的辅助 ABI，与系统映像也支持的另一个 ABI 对应。
此机制确保系统在安装时从软件包提取最佳机器代码。

为实现最佳性能，应直接针对主要 ABI 进行编译。例如，基于 ARMv5TE 的典型设备只会定义主要 ABI：armeabi。 相反，基于 ARMv7 的典型设备将主要 ABI 定义为 armeabi-v7a，而将辅助 ABI 定义为 armeabi，因为它可以运行为每个 ABI 生成的应用原生二进制文件。

许多基于 x86 的设备也可运行 armeabi-v7a 和 armeabi NDK 二进制文件。对于这些设备，主要 ABI 将是 x86，辅助 ABI 是 armeabi-v7a。

基于 MIPS 的典型设备只定义主要 ABI：mips。