# 删除仓库中的大文件
[Removing sensitive data from a repository](https://help.github.com/articles/removing-sensitive-data-from-a-repository/)

git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA' --prune-empty --tag-name-filter cat -- --all

解释
```
git filter-branch --force --index-filter <command>
用于执行

--prune-empty
这个看文档，应该是将空提交删除。  

--tag-name-filter cat
重写tag

-- --all  
文档中说明 [--] [<rev-list options>…​]

git rm --cached --ignore-unmatch
--ignore-unmatch 
```

# clone 仓库时引用本地已存在的数据
git clone --dissociate --reference "LOCAL_PATH" REP_PATH

# git rebase 不带任何参数
    git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>] [<upstream> [<branch>]]
    git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>] --root [<branch>]
    git rebase --continue | --skip | --abort | --quit | --edit-todo
    
    如果指定了<branch>，则在执行其他任何操作之前， git rebase 将自动执行 git checkout <branch> 。否则它将留在当前分支上。
    如果未指定 <upstream>，则配置在 branch.<name>.remote 和 branch.<name>.merge 选项(详见 git-config[1] ) 中的 upstream 将被使用，并假定 --fork-point 选项。如果您当前不在任何分支上，或者如果当前分支没有配置上游，则 rebase 将中止。
    
# 如何删除第一个提交
git rebase -i --root    
    
    
# gitlab clone 较大的项目时失败 502
使用 https 下载超时了,换用 ssh 后成功.

# ssh 和 https 如何切换
修改 config 文件即可
